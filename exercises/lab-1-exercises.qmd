---
title: Lab 1 exercises
number-sections: true
---

We begin by loading the necessary packages for these tasks. Do you experience any issues with loading the packages? If so, you may need to install them first using the `install.packages()` function in the console.

```{r}
#| label: load-packages
#| message: false

library(tidyverse)
library(here)
library(janitor)
```

# Exercises

## Read STePS data

Complete the code below to read the STePS dataset. We create a new object `df_data` where we continue with edits. The original data is stored in `df_rawdata` without any edits.

```{r}
#| label: read-data
#| message: false
#| eval: false

df_rawdata <- read_csv2(here("FOLDER", "FILENAME.csv"))

df_data <- df_rawdata
```

## Inspect data using glimpse() and view()

Call the `glimpse()` and `view()` functions to check the structure of the dataset. You can also use the `head()`, `names()`, `ncol()`, and `nrow()` functions.

```{r}
#| label: glimpse-data
#| message: false
#| eval: false

glimpse(OBJECT_NAME)
```

```{r}
#| label: view-data
#| eval: false

view(OBJECT_NAME)
```

## Clean column names part 1

Add the `clean_names()` function to the code below. Compare the names before and after using the function.

```{r}
#| eval: false
names(df_data)
```

```{r}
#| label: clean-names
#| eval: false
df_data <- df_data |> 
  # ADD FUNCTION HERE

```

Type `names(df_data)` again to see the changes.

## Clean column names part 2

The `clean_names()` is very helpful, but it didn't sort all of the problems. We still have some inconsistent column names from the raw data. Add a fix for the PHQ-9 inconsistencies.

```{r}
#| label: rename-columns
#| eval: false

df_data <- df_data |> 
  rename_with(~ .x |> 
    str_replace_all("screening", "screen") |> 
    str_replace_all("ders_16|ders16", "ders") |> 
    str_replace_all(ADD PHQ-9 FIX HERE)
  )

names(df_data)
```

## Fix missing values

Check which columns have weird values for missing values. You can use the `glimpse()` function or view the data in the viewer. You can also use the `unique()` function to check which values are present in a column.

```{r}
#| label: fix-missing-values
#| eval: false

df_data <- df_data |> 
  mutate(across(c(ADD COLS WITH "missing" HERE), ~na_if(., "missing")))

```

## Fix column types

In the demonstration, we showed how to change column types to numeric. Replicate the same thing here, but for factor columns instead. Use the `mutate()` and `across()` functions.

```{r}
#| label: fix-column-types
#| eval: false

# which columns should be numeric?
num_cols <- c("lsas", "gad", "phq9", "bbq", "scs", "dmrsodf", "ders", "pid_5")

# which columns should be factors?
fct_cols <- c("COL1", "COL2")

df_data <- df_data |> 
  mutate(
    across(starts_with(num_cols), as.numeric),
    # INSERT FACTOR FIX HERE

  )
```

Use the `glimpse()` function to check that it worked.

## Save cleaned data

Finally, save the cleaned data to a new CSV file called `steps_clean.csv` in the `/data` folder. Use the `write_csv()` function from the *readr* package along with `here()`, just like we did in the beginning of this script.

