{
  "hash": "0ea4ffc833b5e843238e87d6fa6d09e3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Lab 1 exercises\nnumber-sections: true\n---\n\n\n::: {.cell}\n\n:::\n\n\n::: {.callout-tip}\nThree underscores (`___`) in the code below indicate where you need to fill in the missing parts.\n:::\n\nWe begin by loading the necessary packages for these tasks. Do you experience any issues with loading the packages? If so, you may need to install them first using the `install.packages()` function in the console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\nlibrary(janitor)\n```\n:::\n\n\n# Exercises\n\n## Read STePS data\n\nComplete the code below to read the STePS dataset. We create a new object `df_data` where we continue with edits. The original data is stored in `df_rawdata` without any edits.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_rawdata <- read_csv2(here(___))\n\ndf_data <- df_rawdata\n```\n:::\n\n\n## Inspect data using glimpse() and view()\n\nCall the `glimpse()` and `view()` functions to check the structure of the dataset. You can also use the `head()`, `names()`, `ncol()`, and `nrow()` functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(___)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nview(___)\n```\n:::\n\n\n## Clean column names part 1\n\nAdd the `clean_names()` function to the code below. Compare the names before and after using the function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(df_data)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_data <- df_data |> \n  ___\n```\n:::\n\n\nType `names(df_data)` again to see the changes.\n\n## Clean column names part 2\n\nThe `clean_names()` is very helpful, but it didn't sort all of the problems. We still have some inconsistent column names from the raw data. Add a fix for the PHQ-9 inconsistencies.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_data <- df_data |> \n  rename_with(~ .x |> \n    str_replace_all(\"screening\", \"screen\") |> \n    str_replace_all(\"ders_16|ders16\", \"ders\") |> \n    str_replace_all(___)\n  )\n\nnames(df_data)\n```\n:::\n\n\n## Fix missing values\n\nCheck which columns have weird values for missing values. You can use the `glimpse()` function or view the data in the viewer. You can also use the `unique()` function to check which values are present in a column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_data <- df_data |> \n  mutate(across(c(___), ~na_if(., \"missing\")))\n```\n:::\n\n\n## Fix column types\n\nIn the demonstration, we showed how to change column types to numeric. Replicate the same thing here, but for factor columns instead. Use the `mutate()` and `across()` functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# which columns should be numeric?\nnum_cols <- c(\"lsas\", \"gad\", \"phq9\", \"bbq\", \"scs\", \"dmrsodf\", \"ders\", \"pid_5\")\n\n# which columns should be factors?\nfct_cols <- c(___)\n\ndf_data <- df_data |> \n  mutate(\n    across(starts_with(num_cols), as.numeric),\n    # INSERT FACTOR FIX HERE\n    ___\n  )\n```\n:::\n\n\nUse the `glimpse()` function to check that it worked.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n___\n```\n:::\n\n\n## Save cleaned data\n\nFinally, save the cleaned data to a new CSV file called `steps_clean.csv` in the `/data` folder. Use the `write_csv()` function from the *readr* package along with `here()`, just like we did in the beginning of this script.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n___\n```\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}