{
  "hash": "8f010ed12e4720b90cf83ae745b38ca6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Probability Distributions in R\"\nformat: html\n---\n\n\n\n\nR provides a systematic way to work with probability distributions.\\\nFor each distribution, there are **four types of functions**, following a naming convention:\n\n-   `dxxx`: Density (for continuous) or Probability Mass (for discrete)\\\n-   `pxxx`: Cumulative distribution function (CDF)\\\n-   `qxxx`: Quantile function (inverse CDF)\\\n-   `rxxx`: Random sample generation\n\n------------------------------------------------------------------------\n\n### 1. Density / Probability Mass (`dxxx`)\n\n-   For **continuous distributions** (like the normal), this is the **probability density function (pdf)**.\\\n    It does not give a probability directly, but tells you how \"dense\" the distribution is around a value.\\\n    Example: `dnorm(0)` gives the height of the normal curve at 0.\n-   For **discrete distributions** (like the binomial or poisson), it is the **probability mass function (pmf)**.\\\n    This gives the actual probability of the outcome.\\\n    Example: `dbinom(3, size=10, prob=0.5)` = probability of exactly 3 successes.\n\nThink of `dxxx` as answering: \"What is the likelihood at this exact point?\"\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Normal density at x = 0, mean = 0, sd = 1\ndnorm(0, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3989423\n```\n\n\n:::\n\n```{.r .cell-code}\n# Probability that a Poisson(λ=2) equals x = 3\ndpois(3, lambda = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.180447\n```\n\n\n:::\n:::\n\n\n\n\n### 2. Cumulative probability (`pxxx`)\n\n-   This function gives the probability that the random variable is **less than or equal to a value**.\n\n-   Example: `pnorm(1.96)` = probability that a standard normal random variable is ≤ 1.96 (about 0.975).\n\n-   Example: `pbinom(4, size=10, prob=0.5)` = probability of getting **up to 4 successes** in 10 coin tosses\n\nThink of `pxxx` as answering:\\\n*\"What is the probability that I am at or below this value?\"*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# P(X ≤ 1.96) when X ~ N(0,1)\npnorm(1.96, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9750021\n```\n\n\n:::\n\n```{.r .cell-code}\n# Cumulative probability for Binomial(n=10, p=0.3), X ≤ 4\npbinom(4, size = 10, prob = 0.3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8497317\n```\n\n\n:::\n:::\n\n\n\n\n### 3. Quantiles (`qxxx`)\n\n-   This is the **inverse** of the CDF.\n\n-   You give it a probability `p`, and it tells you the corresponding value (quantile).\n\n-   Example: `qnorm(0.975)` = the 97.5th percentile of the normal distribution (≈ 1.96).\n\n-   Example: `qbinom(0.5, size=10, prob=0.5)` = the median number of successes in 10 coin tosses.\n\nThink of `qxxx` as answering:\\\n*\"At what value do I reach this probability?\"*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 97.5th percentile of a N(0,1)\nqnorm(0.975, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.959964\n```\n\n\n:::\n\n```{.r .cell-code}\n# Median of Chi-squared with 5 df\nqchisq(0.5, df = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.35146\n```\n\n\n:::\n:::\n\n\n\n\n### 4. Random generation (`rxxx`)\n\n-   This generates random numbers following the distribution.\n\n-   Example: `rnorm(5, mean=0, sd=1)` → five random draws from a standard normal distribution.\n\n-   Example: `rpois(10, lambda=3)` → ten simulated counts from a Poisson distribution.\n\nThink of `rxxx` as answering:\\\n*\"Give me some random data from this distribution.\"*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate 5 random normal values\nrnorm(5, mean = 0, sd = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  0.482202123  1.140005813  1.158857672  0.003924625 -1.026943908\n```\n\n\n:::\n\n```{.r .cell-code}\n# Generate 10 random uniform values between 0 and 1\nrunif(10, min = 0, max = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.82426720 0.52138493 0.91966684 0.84333101 0.47440892 0.80970328\n [7] 0.07018974 0.05150087 0.63673564 0.71285348\n```\n\n\n:::\n:::\n\n\n\n\n## Common Distributions and Function Prefixes\n\n| Distribution   | Prefix  | Example Functions                      |\n|----------------|---------|----------------------------------------|\n| Normal         | `norm`  | `dnorm`, `pnorm`, `qnorm`, `rnorm`     |\n| Binomial       | `binom` | `dbinom`, `pbinom`, `qbinom`, `rbinom` |\n| Poisson        | `pois`  | `dpois`, `ppois`, `qpois`, `rpois`     |\n| Exponential    | `exp`   | `dexp`, `pexp`, `qexp`, `rexp`         |\n| Uniform        | `unif`  | `dunif`, `punif`, `qunif`, `runif`     |\n| Chi-squared    | `chisq` | `dchisq`, `pchisq`, `qchisq`, `rchisq` |\n| t-distribution | `t`     | `dt`, `pt`, `qt`, `rt`                 |\n| F-distribution | `f`     | `df`, `pf`, `qf`, `rf`                 |\n| Gamma          | `gamma` | `dgamma`, `pgamma`, `qgamma`, `rgamma` |\n| Beta           | `beta`  | `dbeta`, `pbeta`, `qbeta`, `rbeta`     |\n| Geometric      | `geom`  | `dgeom`, `pgeom`, `qgeom`, `rgeom`     |\n| Hypergeometric | `hyper` | `dhyper`, `phyper`, `qhyper`, `rhyper` |\n\n\nRight now, these distributions may seem very theoretical. In chapter [P-values and Confidence Intervals](p-values-ci.qmd) however, we'll use these to get some actual inference from the STEpS data.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}