{
  "hash": "095cf94dbaa26a2ba774713f28dbc56f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab: Import and clean data\"\nnumber-sections: true\nformat: live-html\nengine: knitr\nwebr:\n  packages:\n    - dplyr\n    - tidyr\n    - readr\n    - ggplot2\nresources:\n  - ../data/steps_raw.csv\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| output: false\nwebr::install(\"gradethis\", quiet = TRUE)\nlibrary(gradethis)\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n  }\n})\n```\n:::\n\n\n\n\n\nThis lab is linked to the [Import and clean data](../chapters/import-clean.qmd) chapter. We will look at some common steps involved in importing and cleaning data, such as fixing column names, missing values, and column types.\n\n::: {.callout-tip}\nThree underscores (`___`) in the code below indicate where you need to fill in the missing parts. We use the `webr` engine to run the code in your browser, but you can also run it in RStudio. The feedback you get from these web exercises comes from the `gradethis` package. It's great but not perfect.\n:::\n\n# Load packages and data {.unnumbered}\n\nFirst, let's load the packages and data. Do you experience any issues with loading the packages in RStudio? If so, you may need to install them first using the `install.packages()` function in the console.\n\n\n\n\n::: {.cell setup='true' exercise='[\"ex_1\",\"ex_2\",\"ex_3\",\"ex_4\",\"ex_5\",\"ex_6\",\"ex_7\"]'}\n```{webr}\n#| label: setup\n#| message: false\n#| warning: false\n#| setup: true\n#| exercise:\n#|  - ex_1\n#|  - ex_2\n#|  - ex_3\n#|  - ex_4\n#|  - ex_5\n#|  - ex_6\n#|  - ex_7\n\nlibrary(tidyverse)\nlibrary(here)\nlibrary(janitor)\n\n# Load the data\ndf_rawdata <- read_csv2(here(\"data\", \"steps_raw.csv\"))\n\n```\n:::\n\n::: {.cell}\n```{webr}\n#| label: setup-session\n#| message: false\n#| warning: false\n\nlibrary(tidyverse)\nlibrary(here)\nlibrary(janitor)\n\n# Load the data\ndf_rawdata <- read_csv2(here(\"data\", \"steps_raw.csv\"))\n```\n:::\n\n\n\n\n# Inspect data using glimpse()\n\nWe will check the basic structure of our raw data by using the `glimpse()` function.\n\nIf you are doing this lab in RStudio, you can try calling `view()` to open the data in a spreadsheet-like view.\n\n::: {#exr-inspect-data}\n## Inspect data\n:::\n\n:::: {.panel-tabset}\n\n## Problem\n\nUse the `glimpse()` function to check the structure of the STePS data. What do you notice about the data? Are there any potential issues with the data structure?\n\n\n\n\n::: {.cell exercise='ex_1'}\n```{webr}\n#| label: ex-1\n#| exercise: ex_1\n\nglimpse(___)\n\n```\n:::\n\n\n\n\n## Hints \n\n::: {.hint exercise=\"ex_1\"}\n\nUse the function on your raw data object.\n\n:::\n\n## Solution\n\n::: {.solution exercise=\"ex_1\"}\n\n\n\n\n::: {.cell exercise='ex_1' solution='true'}\n```{webr}\n#| label: ex-1-solution\n#| exercise: ex_1\n#| solution: true\n\nglimpse(df_rawdata)\n\n```\n:::\n\n\n\n\n:::\n\n\n\n\n::: {.cell exercise='ex_1' check='true'}\n```{webr}\n#| label: ex-1-gradethis\n#| exercise: ex_1\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n\n\n::::\n\n# Clean column names\n\n::: {#exr-clean-names}\n##  Clean column names, part 1\n:::\n\n:::: {.panel-tabset}\n\n## Problem\n\nUse the `clean_names()` function to clean the column names in `df_rawdata`. Check the names before and after cleaning. What changes do you notice? Are there any column names that are still problematic?\n\n\n\n\n::: {.cell exercise='ex_2'}\n```{webr}\n#| label: ex-2\n#| exercise: ex_2\n\nnames(df_rawdata)\n\n# Clean the column names\ndf_rawdata |> \n  ___ |> \n  names()\n```\n:::\n\n\n\n\n## Hints \n\n::: {.hint exercise=\"ex_2\"}\n\nUse the `clean_names()` function from the *janitor* package.\n\n:::\n\n## Solution\n\n::: {.solution exercise=\"ex_2\"}\n\n\n\n\n::: {.cell exercise='ex_2' solution='true'}\n```{webr}\n#| label: ex-2-solution\n#| exercise: ex_2\n#| solution: true\n\nnames(df_rawdata)\n\n# Clean the column names\ndf_rawdata |> \n  clean_names() |> \n  names()\n```\n:::\n\n\n\n\n:::\n\n\n\n\n::: {.cell exercise='ex_2' check='true'}\n```{webr}\n#| label: ex-2-gradethis\n#| exercise: ex_2\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n\n\n::::\n\n::: {#exr-clean-names-2}\n##  Clean column names, part 2\n:::\n\n:::: {.panel-tabset}\n\n## Problem\n\nThe `clean_names()` is very helpful, but it didn't sort all of the problems. We still have some inconsistent column names for screening, DERS-16, and PHQ-9.\n\nUse the `rename_with()` function to fix the column names of PHQ-9 in `df_rawdata`. Check the names before and after cleaning.\n\n\n\n\n::: {.cell exercise='ex_3'}\n```{webr}\n#| label: ex-3\n#| exercise: ex_3\n\ndf_rawdata |> \n  clean_names() |> \n  rename_with(~ .x |> \n    str_replace_all(\"screening\", \"screen\") |> \n    str_replace_all(\"ders_16|ders16\", \"ders\") |> \n    ___\n  ) |> \n  names()\n```\n:::\n\n\n\n\n## Hints \n\n::: {.hint exercise=\"ex_3\"}\n\nUse `str_replace_all()` to standardize the PHQ-9 column names, similar to DERS-16.\n\n:::\n\n## Solution\n\n::: {.solution exercise=\"ex_3\"}\n\n\n\n\n::: {.cell exercise='ex_3' solution='true'}\n```{webr}\n#| label: ex-3-solution\n#| exercise: ex_3\n#| solution: true\n\ndf_rawdata |> \n  clean_names() |> \n  rename_with(~ .x |> \n    str_replace_all(\"screening\", \"screen\") |> \n    str_replace_all(\"ders_16|ders16\", \"ders\") |> \n    str_replace_all(\"phq_9|phq9\", \"phq9\")\n  ) |> \n  names()\n```\n:::\n\n\n\n\n:::\n\n\n\n\n::: {.cell exercise='ex_3' check='true'}\n```{webr}\n#| label: ex-3-gradethis\n#| exercise: ex_3\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n\n\n::::\n\n# Fix missing values\n\n::: {#exr-check-missing-values}\n##  Check missing values\n:::\n\n:::: {.panel-tabset}\n\n## Problem\n\nCheck which columns have weird values for missing values. Here, we use the `unique()` function to check which values are present in the *character* columns. Often when columns we think should be numeric have odd values for missing values, they end up as *character* columns.\n\n\n\n\n::: {.cell exercise='ex_4'}\n```{webr}\n#| label: ex-4\n#| exercise: ex_4\n\n# Check unique values in the character columns to see \"missing\" values\ndf_rawdata |> \n  select(where(___)) |> \n  map(unique)\n```\n:::\n\n\n\n\n## Hints \n\n::: {.hint exercise=\"ex_4\"}\n\nThe structure for selecting by column type is: `is.type`, such as `is.numeric`. Do the same but for character type.\n\n:::\n\n## Solution\n\n::: {.solution exercise=\"ex_4\"}\n\n\n\n\n::: {.cell exercise='ex_4' solution='true'}\n```{webr}\n#| label: ex-4-solution\n#| exercise: ex_4\n#| solution: true\n\n# Check unique values in a few columns to see \"missing\" values\ndf_rawdata |> \n  select(where(is.character)) |> \n  map(unique)\n```\n:::\n\n\n\n\n:::\n\n\n\n\n::: {.cell exercise='ex_4' check='true'}\n```{webr}\n#| label: ex-4-gradethis\n#| exercise: ex_4\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n\n\n::::\n\n::: {#exr-check-missing-values}\n##  Fix missing values\n:::\n\n:::: {.panel-tabset}\n\n## Problem\n\nNow that we have seen the problem, use the `mutate()` and `across()` functions to replace these values with `NA`. Make sure to replace all occurrences of \"missing\" in the character columns.\n\n\n\n\n::: {.cell exercise='ex_5'}\n```{webr}\n#| label: ex-5\n#| exercise: ex_5\n\n# Fix the missing values\ndf_rawdata |> \n  clean_names() |> \n  mutate(across(where(is.character), ~na_if(., \"___\"))) |> \n  glimpse()\n```\n:::\n\n\n\n\n## Hints \n\n::: {.hint exercise=\"ex_5\"}\n\nYou should replace the \"missing\" values with `NA`.\n\n:::\n\n## Solution\n\n::: {.solution exercise=\"ex_5\"}\n\n\n\n\n::: {.cell exercise='ex_5' solution='true'}\n```{webr}\n#| label: ex-5-solution\n#| exercise: ex_5\n#| solution: true\n\n# Fix the missing values\ndf_rawdata |> \n  clean_names() |> \n  mutate(across(where(is.character), ~na_if(., \"missing\"))) |> \n  glimpse()\n```\n:::\n\n\n\n\n:::\n\n\n\n\n::: {.cell exercise='ex_5' check='true'}\n```{webr}\n#| label: ex-5-gradethis\n#| exercise: ex_5\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n\n\n::::\n\n# Fix column types\n\n::: {#exr-fix-column-types}\n## Fix column types\n:::\n\n:::: {.panel-tabset}\n\n## Problem\n\nLet's imagine we have many columns that should be numeric. Instead of repeating the same function many times, we can use the `across()` function.\n\n\n\n\n::: {.cell exercise='ex_6'}\n```{webr}\n#| label: ex-6\n#| exercise: ex_6\n\n# which columns should be numeric?\nnum_cols <- c(\"lsas\", \"gad\", \"phq9\", \"bbq\", \"scs\", \"dmrsodf\", \"ders\", \"pid_5\")\n\n# Steps from previous exercises\ndf_rawdata |> \n  clean_names() |> \n  mutate(across(where(is.character), ~na_if(., \"missing\"))) |> \n  # apply the across function to the numeric columns\n  mutate(\n    across(starts_with(___), as.numeric)\n  ) |> \n  glimpse()\n```\n:::\n\n\n\n\n## Hints \n\n::: {.hint exercise=\"ex_6\"}\n\nUse the object we created for the numeric columns.\n\n:::\n\n## Solution\n\n::: {.solution exercise=\"ex_6\"}\n\n\n\n\n::: {.cell exercise='ex_6' solution='true'}\n```{webr}\n#| label: ex-6-solution\n#| exercise: ex_6\n#| solution: true\n\n# which columns should be numeric?\nnum_cols <- c(\"lsas\", \"gad\", \"phq9\", \"bbq\", \"scs\", \"dmrsodf\", \"ders\", \"pid_5\")\n\n# Steps from previous exercises\ndf_rawdata |> \n  clean_names() |> \n  mutate(across(where(is.character), ~na_if(., \"missing\"))) |> \n  # apply the across function to the numeric columns\n  mutate(\n    across(starts_with(num_cols), as.numeric)\n  ) |> \n  glimpse()\n```\n:::\n\n\n\n\n:::\n\n\n\n\n::: {.cell exercise='ex_6' check='true'}\n```{webr}\n#| label: ex-6-gradethis\n#| exercise: ex_6\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n\n\n::::\n\n# Save cleaned data\n\n::: {#exr-save-cleaned-data}\n## Save cleaned data\n:::\n\n:::: {.panel-tabset}\n\n## Problem\n\nFinally, save the cleaned data to a new CSV file called `steps_clean.csv` in the `/data` folder. Use the `write_csv()` function from the *readr* package along with `here()`, just like we did in the beginning of this lab when we loaded the data.\n\n\n\n\n::: {.cell exercise='ex_7'}\n```{webr}\n#| label: ex-7\n#| exercise: ex_7\n\nnum_cols <- c(\"lsas\", \"gad\", \"phq9\", \"bbq\", \"scs\", \"dmrsodf\", \"ders\", \"pid_5\")\n\n# Create the cleaned dataset\ndf_cleaned <- df_rawdata |> \n  clean_names() |> \n  mutate(across(where(is.character), ~na_if(., \"missing\"))) |> \n  mutate(\n    across(starts_with(num_cols), as.numeric)\n  )\n\n# Save the cleaned data as \"steps_clean.csv\" in the \"data\" folder\nwrite_csv(df_cleaned, ___)\n\n```\n:::\n\n\n\n\n## Hints \n\n::: {.hint exercise=\"ex_7\"}\n\nThe format for using `here()` is: `here(\"folder\", \"file\")`.\n\n:::\n\n## Solution\n\n::: {.solution exercise=\"ex_7\"}\n\n\n\n\n::: {.cell exercise='ex_7' solution='true'}\n```{webr}\n#| label: ex-7-solution\n#| exercise: ex_7\n#| solution: true\n\nnum_cols <- c(\"lsas\", \"gad\", \"phq9\", \"bbq\", \"scs\", \"dmrsodf\", \"ders\", \"pid_5\")\n\n# Create the cleaned dataset\ndf_cleaned <- df_rawdata |> \n  clean_names() |> \n  mutate(across(where(is.character), ~na_if(., \"missing\"))) |> \n  mutate(\n    across(starts_with(num_cols), as.numeric)\n  )\n\n# Save the cleaned data\nwrite_csv(df_cleaned, here(\"data\", \"steps_clean.csv\"))\n```\n:::\n\n\n\n\n:::\n\n\n\n\n::: {.cell exercise='ex_7' check='true'}\n```{webr}\n#| label: ex-7-gradethis\n#| exercise: ex_7\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n\n\n::::\n\n# Summary\n\nIn this lab, we looked at common steps in importing and cleaning data. We learned how to:\n\n- Inspect the data using `glimpse()`\n- Clean column names using `clean_names()`\n- Fix missing values using `mutate()` and `across()`\n- Fix column types using `mutate()` and `across()`\n- Save the cleaned data using `write_csv()`\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}