---
title: "Lab: P-values and confidence intervals"
number-sections: true
format: live-html
engine: knitr
webr:
  packages:
    - dplyr
    - tableone
resources:
  - ../data/steps_clean.csv
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

In this lab, we'll practice calculating p-values and confidence intervals in R. This is based on the [P-values and confidence intervals](../chapters/p-values-ci.qmd) chapter.

```{webr}
#| setup: true
#| exercise: ex_1
# Load the CSV data
library(dplyr)
df_clean <- read.csv("data/steps_clean.csv")
```

If you are working in R Studio, first load packages and data:

```{webr}
#| label: setup-session
library(dplyr)

# Load the CSV data
df_clean <- read.csv("data/steps_clean.csv")
```

::::: panel-tabset
## Exercise 1

Calculate the *two-sided p-value* for the null hypothesis that the mean PHQ-9 value at screening (`df_clean$phq9_screen`) in the underlying population is 9, and describe in words what this number mean using the `t.test()` function in R. If you are working in R Studio, you can type `?t.test` to get a description of what the function does.

```{webr}
#| exercise: ex_1
t.test(___)

```

## Hints

::: {.hint exercise="ex_1"}
You can calculate it manually using the formula in the In this lab, we'll practice calculating p-values and confidence intervals in R. This is based on the [P-values and confidence intervals](../chapters/p-values-ci.qmd) chapter, or use the `t.test()` function

``` r
t.test(df_clean$phq9_screen,
       mu=___,
       alternative = "two.sided") #<2>
```
:::

## Solution

::: {.solution exercise="ex_1"}
The full solution is:

``` r
#use the t.test() function
t.test(df_clean$phq9_screen,
       mu=9,
       alternative = "two.sided")
       
       
#or calculate it manually
x_bar <- mean(df_clean$phq9_screen)
n <- nrow(df_clean)
se <- sd(df_clean$phq9_screen) / sqrt(n)
t_value <- (x_bar - 9) / se
(1 - pt(t_value, df = 180))*2

#<1>
```
:::
:::::

```{webr}
#| setup: true
#| exercise: ex_2
# Load the CSV data
library(dplyr)
df_clean <- read.csv("data/steps_clean.csv")
```

::::: panel-tabset
## Exercise 2

Calculate the 95% confidence interval for PHQ-9 at screening (`df_clean$phq9_screen`), and describe in words what the numbers mean using the Â´t.test()` function.

```{webr}
#| exercise: ex_2
t.test(_____)

```

## Hints

::: {.hint exercise="ex_2"}
Again use the `t.test()` function, or if you want a challenge, try to calculate calculate the confidence interval manually using the formula in the [P-values and confidence intervals](../chapters/p-values-ci.qmd) chapter.

``` r
t.test(df_clean$_____) #<2>
```
:::

## Solution

::: {.solution exercise="ex_2"}
The full solution is:

``` r

t.test(df_clean$phq9_screen) 

#or manually 
x_bar <- mean(df_clean$phq9_screen) # getting the mean and saving as "x_bar"
n <- nrow(df_clean) # getting the n (same as the number of rows) and saving as "n"
se <- sd(df_clean$phq9_screen) / sqrt(n) # calculating the stadard error, and saving as "se"
z <- 1.96 # setting the z-value to 1.95

#calculating the upper confidence limit and save as "ucl"
ucl <- x_bar + z*se
#calculating the lower confidence limit, and save as "lcl"
lcl <- x_bar - z*se

print(c(lcl, ucl)) # printing the upper and lower confidence limits

#<2>
```
:::
:::::

```{webr}
#| setup: true
#| exercise: ex_3
# Load the CSV data
library(dplyr)
df_clean <- read.csv("data/steps_clean.csv")
```

::::: panel-tabset
## Exercise 3

Calculate the p-value for getting our observed proportion of men, $\hat{p}$, (`df_clean$gender=="Man"`)if the the true population proportion, $p$, is 40% or more using the `prop.test()` function. Remember that you can type `?prop.test()` in R Studio to get some info on the function.

```{webr}
#| exercise: ex_3
# Simulating a gender variable
n <- nrow(df_clean)
df_clean$gender <- rbinom(n, 1, 0.7)
df_clean$gender <- ifelse(df_clean$gender == 1, "Woman", "Man")

#and use the function
prop.test(___)

```

## Hints

::: {.hint exercise="ex_3"}
``` r
prop.test(x= sum(df_clean$gender=="Man"), 
          n= length(____), 
          p=___,
          alternative="less")
```
:::

## Solution

::: {.solution exercise="ex_3"}
The full solution is:

``` r
# Simulating a gender variable
n <- nrow(df_clean)
df_clean$gender <- rbinom(n, 1, 0.7)
df_clean$gender <- ifelse(df_clean$gender == 1, "Woman", "Man")

prop.test(x= sum(df_clean$gender=="Man"), 
          n= length(df_clean$gender), 
          p=0.4,
          alternative="less")
 #<3>
```
:::
:::::

```{webr}
#| setup: true
#| exercise: ex_4
# Load the CSV data
library(dplyr)
df_clean <- read.csv("data/steps_clean.csv")
```

::::: panel-tabset
## Exercise 4

Calculate the confidence interval for getting our observed proportion of men, $\hat{p}$, using the `prop.test()` function

```{webr}
#| exercise: ex_4
# Simulating a gender variable
n <- nrow(df_clean)
df_clean$gender <- rbinom(n, 1, 0.7)
df_clean$gender <- ifelse(df_clean$gender == 1, "Woman", "Man")
prop.test()
```

## Hints

::: {.hint exercise="ex_4"}

``` r
prop.test(x= sum(df_clean$gender=="___"), 
          n= length(df_clean$gender))
          
#or use the table function for easier syntax 
prop.test(table(df_clean$____))
```
:::

## Solution

::: {.solution exercise="ex_4"}
The full solution is:

``` r
# Simulating a gender variable
n <- nrow(df_clean)
df_clean$gender <- rbinom(n, 1, 0.7)
df_clean$gender <- ifelse(df_clean$gender == 1, "Woman", "Man")

#getting ci 
prop.test(x= sum(df_clean$gender=="Man"), 
          n= length(df_clean$gender))
          
# #or use the table function for easier syntax 
prop.test(table(df_clean$gender))
 #<4>
```
:::
:::::

::: panel-tabset
## Exercise 5

Reason about the the meaning and interpretation of the confidence intervals you have calculated in the context of how the actual STEpS study was performed. The study can be found at: https://www.nature.com/articles/s44184-024-00063-0

## Hints

No hints here, but please discuss with us :)

## Solution

No solution here, but please discuss with us :)
:::

```{webr}
#| setup: true
#| exercise: ex_6
# Load the CSV data
library(dplyr)
df_clean <- read.csv("data/steps_clean.csv")
# Simulating a gender variable
n <- nrow(df_clean)
df_clean$gender <- rbinom(n, 1, 0.7)
df_clean$gender <- ifelse(df_clean$gender == 1, "Woman", "Man")
```

::::: panel-tabset
## BONUS Exercise 6

Calculate the 95% Wald confidence interval using the formula for the confidence interval and compare it to what you got using the `prop.test()` function

```{webr}
#| exercise: ex_6


```

## Hints

::: {.hint exercise="ex_6"}
you can use the formula for the standard error of the proportion: $$ \mathrm{SE}(p) = \sqrt{\frac{p(1 - p)}{n}} $$

and combine with the formula for the z-scores

$$ z= \frac{p - \hat{p}}{SE} $$

``` r
p_hat <- mean(df_clean$gender=="___")
n = nrow(____)
se <- sqrt(p_hat*(1-p_hat)/n)
z= 1.96

#upper confidence limit
ucl <- p_hat + __*__

#lower confidence limit
lcl <- p_hat - __*s__

print(c(lcl,ucl))
```
:::

## Solution

::: {.solution exercise="ex_6"}
The full solution is:

``` r
# manual Wald CI
p_hat <- mean(df_clean$gender=="Man")
n = nrow(df_clean)
se <- sqrt(p_hat*(1-p_hat)/n)
z= 1.96
#upper coinfidence limit
ucl <- p_hat + z*se
#lower confidence limit
lcl <- p_hat - z*se

print(c(lcl,ucl))

 #<6>
```
:::
:::::

```{webr}
#| setup: true
#| exercise: ex_7
# Load the CSV data
library(dplyr)
df_clean <- read.csv("data/steps_clean.csv")
```

::::: panel-tabset
## BONUS Exercise 7

Modify the simulation code for the sampling distribution to determine what would happen to the p-value if the sample size was 10, 100 or 1000

```{webr}
#| exercise: ex_7
n_samples <- 1e4 # the number of samples
smp_size <- 10 # the size of our samples
means <- rep(NA, n_samples) # an empty vector to contain our mean values

for (i in 1:n_samples) {
  x <- rnorm(smp_size, mean = 82, sd = sd(df_clean$lsas_screen))
  means[i] <- mean(x)
}

mean(means >= mean(df_clean$lsas_screen)) # proportion of simulated means that are larger than our observed mean

```

## Hints

::: {.hint exercise="ex_7"}
``` r
n_samples <- 1e4 # the number of samples
smp_size <- ____ # the size of our samples
means <- rep(NA, n_samples) # an empty vector to contain our mean values

for (i in 1:n_samples) {
  x <- rnorm(smp_size, mean = 82, sd = sd(df_clean$lsas_screen))
  means[i] <- mean(x)
}

mean(means >= mean(df_clean$lsas_screen)) # proportion of simulated means that are larger than our observed mean
```
:::

## Solution

::: {.solution exercise="ex_7"}
The full solution is:

``` r
# for a sample size of 10
n_samples <- 1e4 # the number of samples
smp_size <- 10 # the size of our samples
means <- rep(NA, n_samples) # an empty vector to contain our mean values

for (i in 1:n_samples) {
  x <- rnorm(smp_size, mean = 82, sd = sd(df_clean$lsas_screen))
  means[i] <- mean(x)
}

mean(means >= mean(df_clean$lsas_screen)) # proportion of simulated means that are larger than our observed mean

# for a sample size of 100

n_samples <- 1e4 # the number of samples
smp_size <- 100 # the size of our samples
means <- rep(NA, n_samples) # an empty vector to contain our mean values

for (i in 1:n_samples) {
  x <- rnorm(smp_size, mean = 82, sd = sd(df_clean$lsas_screen))
  means[i] <- mean(x)
}

mean(means >= mean(df_clean$lsas_screen)) # proportion of simulated means that are larger than our observed mean


# for a sample size of 1000 

n_samples <- 1e4 # the number of samples
smp_size <- 1000 # the size of our samples
means <- rep(NA, n_samples) # an empty vector to contain our mean values

for (i in 1:n_samples) {
  x <- rnorm(smp_size, mean = 82, sd = sd(df_clean$lsas_screen))
  means[i] <- mean(x)
}

mean(means >= mean(df_clean$lsas_screen)) # proportion of simulated means that are larger than our observed mean
 #<7>
```
:::
:::::
