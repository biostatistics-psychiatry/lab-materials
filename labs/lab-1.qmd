---
title: "Lab 1: Import and clean data"
---

For this first lab session, we will introduce the datasets we will be using throughout the course. We will also cover how to import and perform basic cleaning of the datasets.

# Introduction to the datasets

::: callout-note
These datasets have the common .csv file format, which is very popular. If you need to import other file formats, such as .xlsx (Excel) or .sav (SPSS), you can use the `readxl` and `haven` packages, respectively.
:::

## STePS-study

This is a dataset from the STePS study, which is a RCT comparing guided and unguided internet-delivered psychodynamic therapy for social anxiety disorder. The study [is published online](https://www.nature.com/articles/s44184-024-00063-0).

## Anh√∂rigSpel-study

# Load packages

In this lab, we will be using the *tidyverse* package, which is a collection of useful packages for data manipulation and visualization. We will also use the *here* package, which helps us manage file paths in a simple way.

```{r}
#| label: load-packages
#| message: false

library(tidyverse)
library(here)
library(janitor)
```

::: callout-warning
If you are using `R` for the first time, you have to run the following code in the **console** to install the packages (one time only!). You can then load them using the code above.

```{r}
#| eval: false

install.packages("tidyverse")
install.packages("here")
```
:::

# Importing data into R

Let's start with the *STePS* dataset. We use the `read_csv()` function, along with the `here()` function, to import the data. Within the `here()` function, we first specify the folder, then the filename. This is helpful for keeping the file paths clean, and makes it easier to share your code with others since the file paths are relative to the project folder.

We also check the number of rows and columns in the dataset after importing it.

```{r}
#| label: import-steps
#| message: false

df_rawdata <- read_csv(here("data", "steps.csv"))

row_check <- nrow(df_rawdata) # 181
col_check <- ncol(df_rawdata) # 37
```

## Check data structure

After importing the data, we can check the structure of the dataset using the `glimpse()` function. This function provides a quick overview of the dataset, including the number of rows and columns, as well as the data types of each column. Does it look as expected?

Your object `df_rawdata` should contain `r row_check` rows and `r col_check` columns. We can see that the first column is named *ID*, which is the unique identifier for each participant. The second column is named *Group*, which indicates the group assignment: unguided treatment, guided treatment, or waitlist. The rest seem to be various questionnaires and scales.

```{r}
#| label: glimpse-data
#| message: false

glimpse(df_rawdata)
```

Other options for checking the basic structure of the data include `head()`, `names()`, `ncol()`, and `nrow()`.

- `head(df_rawdata)` shows the first few rows of the dataset.
- `names(df_rawdata)` shows the names of the columns.
- `ncol(df_rawdata)` shows the number of columns in the dataset.
- `nrow(df_rawdata)` shows the number of rows in the dataset.

Try them out!

# Data cleaning

From the output above, we can see some potential issues with the raw data:

- Some column names contain spaces and other problematic characters (such as `-`).
- There are missing values in several columns.
- The measurement points are not consistent.
- The data types of some columns are not as expected (e.g., character instead of numeric).

Let's get started with cleaning the data. Before we proceed, we will create a copy of the raw data and leave `df_rawdata` unchanged. This is a good practice to avoid losing the original data and to keep track of the changes we make.

::: callout-important
Make a habit of keeping the raw data you import from data collection platforms (e.g., BASS, REDCap) unchanged. This way, your life will be easier when you need to do new exports or updates. You can always go back to the original data if needed.
:::

```{r}
#| label: copy-data
#| message: false

df_data <- df_rawdata
```

## Clean column names

We will use the `clean_names()` function from the *janitor* package to clean the column names. This function replaces spaces and other problematic characters with underscores, and converts all names to lowercase. This makes it easier to work with the data later on.

```{r}
#| label: clean-column-names
#| message: false

df_data <- df_data |> 
  clean_names()

names(df_data)
```

## Ensure missing values are coded as NA

If we are lucky, all the missing values are already coded as `NA` and R will recognize them as missing. More often, however, is that the missing values are coded as `""`, `-99`, or other values. This can cause problems later, so we need to ensure that all missing values are coded as `NA`.

Sometimes, weird labels for missing values is also the reason why some columns are not recognized as numeric.

```{r}
#| label: check-missing-values
#| message: false

```
